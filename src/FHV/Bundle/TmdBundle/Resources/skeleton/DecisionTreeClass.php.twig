<?php

use FHV\Bundle\TmdBundle\DecisionTree\Model\Result;
use FHV\Bundle\TmdBundle\DecisionTree\Model\Decision;
use FHV\Bundle\TmdBundle\DecisionTree\Model\Node;
use FHV\Bundle\TmdBundle\DecisionTree\Model\Tree;
use FHV\Bundle\TmdBundle\Model\Feature;
use FHV\Bundle\TmdBundle\DecisionTree\DecisionTreeInterface;

/**
 * DO NOT EDIT - This class is autogenerated by the the decission tree manager
 * Class {{ cache_class }}
 * @package FHV\Bundle\TmdBundle\DecisionTree
 */
class {{ cache_class }} implements DecisionTreeInterface
{
    protected $tree;

    function __construct()
    {
        {% for node in tree %}
            {{ node.name }} = new Node();
        {% if node.feature != null %}
            {{ node.name }}->setDecision(new Decision('{{ node.feature }}', '{{ node.comparator|raw }}', {{ node.value }}));
        {% endif %}
        {% if node.result != null %}
            {{ node.name }}->setResult(new Result([
            {% for key, value in node.result %}
                '{{ key }}' => {{ value }},
            {% endfor %}
            ]));
        {% endif %}
        {% endfor %}

        {% for node in tree %}
        {% if node.parent != null %}
            {{ node.name }}->setParent({{ node.parent }});
        {% endif %}
        {% if node.left != null %}
            {{ node.name }}->setLeft({{ node.left }});
        {% endif %}
        {% if node.right != null %}
            {{ node.name }}->setRight({{ node.right }});
        {% endif %}
        {% endfor %}

        $this->tree = new Tree($node0);
    }

    /**
    * Process values by tree
    *
    * @param array $values
    *
    * @return array
    */
    public function process(array $values)
    {
        return $this->tree->process($values);
    }
}
